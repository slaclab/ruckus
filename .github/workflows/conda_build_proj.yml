# ----------------------------------------------------------------------------
# Title      : Ruckus GitHub Actions CI Script
# ----------------------------------------------------------------------------
# This file is part of the 'Ruckus Package'. It is subject to
# the license terms in the LICENSE.txt file found in the top-level directory
# of this distribution and at:
#    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
# No part of the 'Ruckus Package', including this file, may be
# copied, modified, propagated, or distributed except according to the terms
# contained in the LICENSE.txt file.
# ----------------------------------------------------------------------------

name: Anaconda Build for a project

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      gitub_repo:
        required: true
        type: string
    secrets:
      CONDA_UPLOAD_TOKEN_TAG:
        required: true
      GH_TOKEN:
        required: true

jobs:
  conda_build_lib:
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os:
          - ubuntu-24.04
    runs-on: ${{ matrix.os }}
    steps:

      # This step checks out a copy of your repository.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Setup anaconda
        env:
          OS_NAME: ${{ matrix.os }}
        run: |
          cd ${HOME}
          wget -O miniforge3.sh https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh
          bash miniforge3.sh -b -p ${HOME}/miniforge3
          export PATH="${HOME}/miniforge3/bin:$PATH"
          source ${HOME}/miniforge3/etc/profile.d/conda.sh
          conda config --set always_yes yes
          conda config --set channel_priority strict
          conda install -n base conda-libmamba-solver
          conda config --set solver libmamba
          conda install conda-build anaconda-client
          conda update -q conda conda-build
          conda update --all

      - name: Get Image Information
        id: get_image_info
        env:
          CONDA_UPLOAD_TOKEN_TAG: ${{ secrets.CONDA_UPLOAD_TOKEN_TAG }}
          URL_BASE: https://github.com/${{ github.repository }}/releases/download
        run: |
          echo "token=$CONDA_UPLOAD_TOKEN_TAG" >> $GITHUB_OUTPUT
          echo "url=${URL_BASE}/${GITHUB_REF#refs/tags/}/rogue_${GITHUB_REF#refs/tags/}.zip" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "file=rogue_${GITHUB_REF#refs/tags/}.zip" >> $GITHUB_OUTPUT

      - name: Download And Extract
        env:
          GH_API: https://api.github.com
          GH_REPO: https://api.github.com/repos/${{ inputs.gitub_repo }}
          AUTH: "Authorization: token ${{ secrets.GH_TOKEN }}"
          WGET_ARGS: "--content-disposition --auth-no-challenge --no-cookie"
          CURL_ARGS: "-LJO#"
          FILENAME: ${{ steps.get_image_info.outputs.file }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          mkdir ${HOME}/download
          cd ${HOME}/download
          GH_TAGS=https://api.github.com/repos/${{ inputs.gitub_repo }}/releases/tags/${GITHUB_REF#refs/tags/}
          echo GH_TAGS = $GH_TAGS
          echo curl -sH "$AUTH" $GH_TAGS
          response=$(curl -sH "$AUTH" $GH_TAGS)
          echo $response
          eval $(echo "$response" | grep -C3 "name.:.\+${FILENAME}" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
          echo $id
          GH_ASSET="$GH_REPO/releases/assets/$id"
          echo $GH_ASSET
          echo curl $CURL_ARGS -H "Authorization: token ${GH_TOKEN}" -H 'Accept: application/octet-stream' "$GH_ASSET"
          curl $CURL_ARGS -H "Authorization: token ${GH_TOKEN}" -H 'Accept: application/octet-stream' "$GH_ASSET"
          unzip $FILENAME

      - name: Build And Upload
        run: |
          export PATH="${HOME}/miniforge3/bin:$PATH"
          source ${HOME}/miniforge3/etc/profile.d/conda.sh
          cd ${HOME}/download/
          conda build --debug conda-recipe --output-folder bld-dir -c tidair-tag -c conda-forge
          anaconda -t ${{ steps.get_image_info.outputs.token }} upload bld-dir/noarch/*.conda
